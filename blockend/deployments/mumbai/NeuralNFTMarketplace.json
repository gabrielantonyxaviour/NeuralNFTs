{
  "address": "0xB7101989eAc2808F8319D1465D18678343FFe21D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__CannotCallOutsideContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NeuralNFTMarketplace__NotCreator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "name": "NeuralNFTMarketplace__RoyaltyFeesTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "NewNftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "NftRoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NeuralNFTMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFeesInBips",
          "type": "uint96"
        }
      ],
      "name": "mintNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newItemId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_list_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newListFee",
          "type": "uint256"
        }
      ],
      "name": "setListFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFeesInBips",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed47f161eb67d84d7d458ace9f4c52f235cef3e5a1270fd6a12412124f977959",
  "receipt": {
    "to": null,
    "from": "0x0429A2Da7884CA14E53142988D5845952fE4DF6a",
    "contractAddress": "0xB7101989eAc2808F8319D1465D18678343FFe21D",
    "transactionIndex": 3,
    "gasUsed": "4210832",
    "logsBloom": "0x
    "blockHash": "0xe5c4bbeaa089f9c5bf867150c4d1acbda31019ea50e985320c9bfbf964f85b48",
    "transactionHash": "0xed47f161eb67d84d7d458ace9f4c52f235cef3e5a1270fd6a12412124f977959",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27298128,
        "transactionHash": "0xed47f161eb67d84d7d458ace9f4c52f235cef3e5a1270fd6a12412124f977959",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000429a2da7884ca14e53142988d5845952fe4df6a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001dda7a7a27efb7000000000000000000000000000000000000000000000000010c675a98ac6780b0000000000000000000000000000000000000000000020163998896c5bb416190000000000000000000000000000000000000000000000000ee8ce01e8477c9b0000000000000000000000000000000000000000000020163b763113fe331189",
        "logIndex": 45,
        "blockHash": "0xe5c4bbeaa089f9c5bf867150c4d1acbda31019ea50e985320c9bfbf964f85b48"
      }
    ],
    "blockNumber": 27298128,
    "cumulativeGasUsed": "5610647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4ec44d5f2cd5a1595ab7eb2174b17d62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__CannotCallOutsideContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NeuralNFTMarketplace__NotCreator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"NeuralNFTMarketplace__RoyaltyFeesTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFees\",\"type\":\"uint256\"}],\"name\":\"NewNftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFees\",\"type\":\"uint256\"}],\"name\":\"NftRoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NeuralNFTMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"}],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newItemId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_list_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newListFee\",\"type\":\"uint256\"}],\"name\":\"setListFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gabriel Antony Xaviour\",\"details\":\"ENeural NFTs are ERC2981 to provide\",\"events\":{\"ItemListed(address,uint256,uint256)\":{\"details\":\"Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"buyItem(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"cancelListing(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"listItem(uint256,uint256)\":{\"params\":{\"price\":\"The desired listing price by the seller\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateListing(uint256,uint256)\":{\"params\":{\"newPrice\":\"The updated listing price proposed by the seller\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"withdrawProceeds()\":{\"details\":\"Reentrancy guard put into action preventing multiple calls to this function\"}},\"title\":\"NeuralNFTMarketplace\",\"version\":1},\"userdoc\":{\"errors\":{\"NeuralNFTMarketplace__PriceMustBeAboveZero()\":[{\"notice\":\"Error Declarations\"}]},\"kind\":\"user\",\"methods\":{\"PLATFORM_FEE()\":{\"notice\":\"2% of the sale of a NFT goes to the owner of the contract\"},\"buyItem(uint256)\":{\"notice\":\"Buys an NFT which is on sale in the marketplace\"},\"cancelListing(uint256)\":{\"notice\":\"Cancels a listing by the user in the marketplace\"},\"constructor\":{\"notice\":\"Initializes the marketplace and owner of the contract.\"},\"listItem(uint256,uint256)\":{\"notice\":\"Lists an NFT for sale on the marketplace\"},\"setListFee(uint256)\":{\"notice\":\"Getters and Setters\"},\"updateListing(uint256,uint256)\":{\"notice\":\"Updates a listing by the user which is on sale in the marketplace\"},\"withdrawProceeds()\":{\"notice\":\"Withdraws the earnings made by the user in the marketplace\"}},\"notice\":\"A marketplace for NFTs with the sixth sense\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NeuralNFTMarketplace.sol\":\"NeuralNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NeuralNFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/// @notice imports\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @notice Error Declarations\\r\\nerror NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\nerror NeuralNFTMarketplace__NotApprovedForMarketplace();\\r\\nerror NeuralNFTMarketplace__AlreadyListed(uint256 tokenId);\\r\\nerror NeuralNFTMarketplace__NotOwner();\\r\\nerror NeuralNFTMarketplace__NotListed(uint256 tokenId);\\r\\nerror NeuralNFTMarketplace__PriceNotMet(uint256 tokenId, uint256 price);\\r\\nerror NeuralNFTMarketplace__NoProceeds();\\r\\nerror NeuralNFTMarketplace__TransferFailed();\\r\\nerror NeuralNFTMarketplace__InsufficientFunds();\\r\\nerror NeuralNFTMarketplace__AlreadyApproved();\\r\\nerror NeuralNFTMarketplace__RoyaltyFeesTooHigh(uint96);\\r\\nerror NeuralNFTMarketplace__CannotCallOutsideContract();\\r\\nerror NeuralNFTMarketplace__NotCreator(uint256 tokenId, address caller);\\r\\n\\r\\n/**\\r\\n * @author Gabriel Antony Xaviour\\r\\n * @title NeuralNFTMarketplace\\r\\n * @notice A marketplace for NFTs with the sixth sense\\r\\n * @dev ENeural NFTs are ERC2981 to provide\\r\\n */\\r\\ncontract NeuralNFTMarketplace is ERC2981, ERC721URIStorage, ReentrancyGuard {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    // Structures\\r\\n    struct Listing {\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    /// @notice 2% of the sale of a NFT goes to the owner of the contract\\r\\n    uint256 public constant PLATFORM_FEE = 2;\\r\\n\\r\\n    // Immutable variable\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    // State variables\\r\\n    mapping(uint256 => Listing) private s_listings; // tokenId => listing\\r\\n\\r\\n    mapping(address => uint256) private s_earnings; // user => earnings\\r\\n\\r\\n    mapping(uint256 => address) private s_creator;\\r\\n\\r\\n    uint256 public s_list_fee = 0.001 ether;\\r\\n\\r\\n    /// @dev Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)\\r\\n    event ItemListed(address indexed seller, uint256 indexed tokenId, uint256 price);\\r\\n\\r\\n    event ItemBought(address indexed buyer, uint256 indexed tokenId, uint256 price);\\r\\n\\r\\n    event ItemCancelled(address indexed seller, uint256 indexed tokenId);\\r\\n\\r\\n    event NewNftMinted(address indexed creator, uint256 indexed tokenId, uint256 royaltyFees);\\r\\n\\r\\n    event NftRoyaltyUpdated(address indexed creator, uint256 indexed tokenId, uint256 royaltyFees);\\r\\n\\r\\n    /// @notice Modifiers pre-defined for cleaner code\\r\\n    modifier notListed(uint256 tokenId, address owner) {\\r\\n        Listing memory listing = s_listings[tokenId];\\r\\n        if (listing.price > 0) {\\r\\n            revert NeuralNFTMarketplace__AlreadyListed(tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(uint256 tokenId) {\\r\\n        Listing memory listing = s_listings[tokenId];\\r\\n        if (listing.price <= 0) {\\r\\n            revert NeuralNFTMarketplace__NotListed(tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(uint256 tokenId, address spender) {\\r\\n        if (spender != ownerOf(tokenId)) {\\r\\n            revert NeuralNFTMarketplace__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isRoyaltyTooHigh(uint96 _royaltyFeesInBips) {\\r\\n        if (_royaltyFeesInBips > 2000) {\\r\\n            revert NeuralNFTMarketplace__RoyaltyFeesTooHigh(_royaltyFeesInBips);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isCalledFromContract(address caller) {\\r\\n        if (caller != address(this)) {\\r\\n            revert NeuralNFTMarketplace__CannotCallOutsideContract();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isCreator(uint256 tokenId, address creator) {\\r\\n        if (s_creator[tokenId] != creator) {\\r\\n            revert NeuralNFTMarketplace__NotCreator(tokenId, creator);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the marketplace and owner of the contract.\\r\\n    constructor() ERC721(\\\"NeuralNFT\\\", \\\"NNFT\\\") {\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Receive and Fallback functions\\r\\n    receive() external payable {\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        super.approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override isCalledFromContract(msg.sender) {\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override isCalledFromContract(msg.sender) {\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function mintNft(\\r\\n        string memory nftURI, // the CID returned from nftstorage\\r\\n        address royaltyReceiver,\\r\\n        uint96 _royaltyFeesInBips\\r\\n    ) public isRoyaltyTooHigh(_royaltyFeesInBips) nonReentrant returns (uint256 newItemId) {\\r\\n        newItemId = _tokenIds.current();\\r\\n        _safeMint(msg.sender, newItemId);\\r\\n        setRoyaltyInfo(newItemId, royaltyReceiver, _royaltyFeesInBips);\\r\\n        _setTokenURI(newItemId, nftURI);\\r\\n        s_creator[newItemId] = msg.sender;\\r\\n        _tokenIds.increment();\\r\\n        emit NewNftMinted(msg.sender, newItemId, _royaltyFeesInBips);\\r\\n    }\\r\\n\\r\\n    function setRoyaltyInfo(\\r\\n        uint256 _tokenId,\\r\\n        address _receiver,\\r\\n        uint96 _royaltyFeesInBips\\r\\n    ) public isRoyaltyTooHigh(_royaltyFeesInBips) isCreator(_tokenId, msg.sender) {\\r\\n        _setTokenRoyalty(_tokenId, _receiver, _royaltyFeesInBips);\\r\\n        emit NftRoyaltyUpdated(msg.sender, _tokenId, _royaltyFeesInBips);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lists an NFT for sale on the marketplace\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     * @param price The desired listing price by the seller\\r\\n     */\\r\\n    function listItem(uint256 tokenId, uint256 price)\\r\\n        public\\r\\n        payable\\r\\n        notListed(tokenId, msg.sender)\\r\\n        isOwner(tokenId, msg.sender)\\r\\n    {\\r\\n        if (msg.value < s_list_fee) {\\r\\n            revert NeuralNFTMarketplace__InsufficientFunds();\\r\\n        }\\r\\n        if (price <= 0) {\\r\\n            revert NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\n        }\\r\\n        if (getApproved(tokenId) != address(this)) {\\r\\n            revert NeuralNFTMarketplace__NotApprovedForMarketplace();\\r\\n        }\\r\\n\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n        s_listings[tokenId] = Listing(price, msg.sender);\\r\\n        emit ItemListed(msg.sender, tokenId, price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buys an NFT which is on sale in the marketplace\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     */\\r\\n    function buyItem(uint256 tokenId) external payable isListed(tokenId) nonReentrant {\\r\\n        Listing memory listing = s_listings[tokenId];\\r\\n        if (msg.value < listing.price) {\\r\\n            revert NeuralNFTMarketplace__PriceNotMet(tokenId, listing.price);\\r\\n        }\\r\\n        s_earnings[listing.seller] =\\r\\n            s_earnings[listing.seller] +\\r\\n            (msg.value * (100 - PLATFORM_FEE)) /\\r\\n            100;\\r\\n        s_earnings[i_owner] = (msg.value * PLATFORM_FEE) / 100;\\r\\n        delete (s_listings[tokenId]);\\r\\n        safeTransferFrom(listing.seller, msg.sender, tokenId);\\r\\n        emit ItemBought(msg.sender, tokenId, listing.price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels a listing by the user in the marketplace\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     */\\r\\n    function cancelListing(uint256 tokenId)\\r\\n        external\\r\\n        isOwner(tokenId, msg.sender)\\r\\n        isListed(tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        delete (s_listings[tokenId]);\\r\\n        emit ItemCancelled(msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates a listing by the user which is on sale in the marketplace\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     * @param newPrice The updated listing price proposed by the seller\\r\\n     */\\r\\n    function updateListing(uint256 tokenId, uint256 newPrice)\\r\\n        external\\r\\n        payable\\r\\n        isOwner(tokenId, msg.sender)\\r\\n        isListed(tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (msg.value < s_list_fee) {\\r\\n            revert NeuralNFTMarketplace__InsufficientFunds();\\r\\n        }\\r\\n        if (newPrice <= 0) {\\r\\n            revert NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\n        }\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n        s_listings[tokenId].price = newPrice;\\r\\n        emit ItemListed(msg.sender, tokenId, newPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the earnings made by the user in the marketplace\\r\\n     * @dev Reentrancy guard put into action preventing multiple calls to this function\\r\\n     */\\r\\n    function withdrawProceeds() external nonReentrant {\\r\\n        uint256 proceeds = s_earnings[msg.sender];\\r\\n        if (proceeds <= 0) {\\r\\n            revert NeuralNFTMarketplace__NoProceeds();\\r\\n        }\\r\\n        s_earnings[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert NeuralNFTMarketplace__TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC2981)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @notice Getters and Setters\\r\\n\\r\\n    function setListFee(uint256 newListFee) public {\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert NeuralNFTMarketplace__NotOwner();\\r\\n        }\\r\\n        s_list_fee = newListFee;\\r\\n    }\\r\\n\\r\\n    function getListing(uint256 tokenId) external view returns (Listing memory) {\\r\\n        return s_listings[tokenId];\\r\\n    }\\r\\n\\r\\n    function getEarnings(address seller) external view returns (uint256) {\\r\\n        return s_earnings[seller];\\r\\n    }\\r\\n\\r\\n    function getListFee() external view returns (uint256) {\\r\\n        return s_list_fee;\\r\\n    }\\r\\n\\r\\n    function getPlatformFee() external pure returns (uint256) {\\r\\n        return PLATFORM_FEE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x64a7c814f137a3c6133490a50c45dcb8d9202722bb9a797c7ce987a6649ed769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80636352211e116100ec578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610707578063e7fb74c714610744578063e985e9c514610760578063fb5134921461079d57610238565b8063a22cb4651461068a578063b88d4fde146106b3578063c379f647146106dc57610238565b8063883efa67116100c6578063883efa67146105ef5780639038e6931461060b57806395d89b41146106225780639ed19d801461064d57610238565b80636352211e1461054a5780636ea8bc101461058757806370a08231146105b257610238565b80631495fa99116101595780632a55205a116101335780632a55205a1461048f578063305a67a8146104cd57806334fbc9a1146104f657806342842e0e1461052157610238565b80631495fa99146104145780631d0488601461043d57806323b872dd1461046657610238565b8063081812fc11610195578063081812fc14610334578063095ea7b314610371578063107a274a1461039a578063131b9c04146103d757610238565b80630179ea88146102b057806301ffc9a7146102cc57806306fdde031461030957610238565b366102385734600c60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022f9190614195565b92505081905550005b34600c60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a79190614195565b92505081905550005b6102ca60048036038101906102c59190613971565b6107c8565b005b3480156102d857600080fd5b506102f360048036038101906102ee9190613828565b610ab7565b6040516103009190613de5565b60405180910390f35b34801561031557600080fd5b5061031e610ac9565b60405161032b9190613e00565b60405180910390f35b34801561034057600080fd5b5061035b600480360381019061035691906138f1565b610b5b565b6040516103689190613d55565b60405180910390f35b34801561037d57600080fd5b50610398600480360381019061039391906137e8565b610ba1565b005b3480156103a657600080fd5b506103c160048036038101906103bc91906138f1565b610baf565b6040516103ce9190614002565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f99190613665565b610c3c565b60405161040b919061401d565b60405180910390f35b34801561042057600080fd5b5061043b6004803603810190610436919061391e565b610c85565b005b34801561044957600080fd5b50610464600480360381019061045f91906138f1565b610de4565b005b34801561047257600080fd5b5061048d600480360381019061048891906136d2565b610e73565b005b34801561049b57600080fd5b506104b660048036038101906104b19190613971565b610eea565b6040516104c4929190613dbc565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef91906138f1565b6110d5565b005b34801561050257600080fd5b5061050b6112f6565b604051610518919061401d565b60405180910390f35b34801561052d57600080fd5b50610548600480360381019061054391906136d2565b6112fb565b005b34801561055657600080fd5b50610571600480360381019061056c91906138f1565b611372565b60405161057e9190613d55565b60405180910390f35b34801561059357600080fd5b5061059c611424565b6040516105a9919061401d565b60405180910390f35b3480156105be57600080fd5b506105d960048036038101906105d49190613665565b61142d565b6040516105e6919061401d565b60405180910390f35b61060960048036038101906106049190613971565b6114e5565b005b34801561061757600080fd5b50610620611865565b005b34801561062e57600080fd5b50610637611a25565b6040516106449190613e00565b60405180910390f35b34801561065957600080fd5b50610674600480360381019061066f9190613882565b611ab7565b604051610681919061401d565b60405180910390f35b34801561069657600080fd5b506106b160048036038101906106ac91906137a8565b611c43565b005b3480156106bf57600080fd5b506106da60048036038101906106d59190613725565b611c59565b005b3480156106e857600080fd5b506106f1611cbb565b6040516106fe919061401d565b60405180910390f35b34801561071357600080fd5b5061072e600480360381019061072991906138f1565b611cc1565b60405161073b9190613e00565b60405180910390f35b61075e600480360381019061075991906138f1565b611dd4565b005b34801561076c57600080fd5b5061078760048036038101906107829190613692565b6121aa565b6040516107949190613de5565b60405180910390f35b3480156107a957600080fd5b506107b261223e565b6040516107bf919061401d565b60405180910390f35b81336107d382611372565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610837576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836000600b6000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161090357816040517fdb363db80000000000000000000000000000000000000000000000000000000081526004016108fa919061401d565b60405180910390fd5b60026009541415610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090613fe2565b60405180910390fd5b6002600981905550600e5434101561098d576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085116109c7576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600c60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a369190614195565b9250508190555084600b600088815260200190815260200160002060000181905550853373ffffffffffffffffffffffffffffffffffffffff167f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa87604051610a9f919061401d565b60405180910390a36001600981905550505050505050565b6000610ac282612248565b9050919050565b606060028054610ad89061438a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b049061438a565b8015610b515780601f10610b2657610100808354040283529160200191610b51565b820191906000526020600020905b815481529060010190602001808311610b3457829003601f168201915b5050505050905090565b6000610b668261232a565b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610bab8282612375565b5050565b610bb7613434565b600b6000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b806107d0816bffffffffffffffffffffffff161115610cdb57806040517f05a79cda000000000000000000000000000000000000000000000000000000008152600401610cd291906140a5565b60405180910390fd5b83338073ffffffffffffffffffffffffffffffffffffffff16600d600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d825781816040517fee3671ac000000000000000000000000000000000000000000000000000000008152600401610d79929190614038565b60405180910390fd5b610d8d86868661248d565b853373ffffffffffffffffffffffffffffffffffffffff167f1f3bfe210cd26bc968a819810d10348b0b3b33fbbd03dac99294ca195b417c6086604051610dd4919061408a565b60405180910390a3505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e69576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e8190555050565b333073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f6ac50df200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ee4848484612635565b50505050565b6000806000600160008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156110805760006040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b600061108a612695565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff16866110b6919061421c565b6110c091906141eb565b90508160000151819350935050509250929050565b80336110e082611372565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611144576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826000600b6000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161121057816040517fdb363db8000000000000000000000000000000000000000000000000000000008152600401611207919061401d565b60405180910390fd5b60026009541415611256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124d90613fe2565b60405180910390fd5b6002600981905550600b60008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050843373ffffffffffffffffffffffffffffffffffffffff167f6be0c8480cb6f0bffcd4a654fb162c986ba528d5ff0e743ee21b1fc900fa264f60405160405180910390a360016009819055505050505050565b600281565b333073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611361576040517f6ac50df200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61136c84848461269f565b50505050565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561141b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141290613f42565b60405180910390fd5b80915050919050565b60006002905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561149e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149590613ec2565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b81336000600b6000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111156115b357826040517fe000ca910000000000000000000000000000000000000000000000000000000081526004016115aa919061401d565b60405180910390fd5b84336115be82611372565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611622576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e5434101561165e576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008611611698576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166116b888610b5b565b73ffffffffffffffffffffffffffffffffffffffff1614611705576040517f913365f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600c60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117749190614195565b9250508190555060405180604001604052808781526020013373ffffffffffffffffffffffffffffffffffffffff16815250600b60008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050863373ffffffffffffffffffffffffffffffffffffffff167f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa88604051611854919061401d565b60405180910390a350505050505050565b600260095414156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290613fe2565b60405180910390fd5b60026009819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611931576040517f22be094a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161199c90613d40565b60006040518083038185875af1925050503d80600081146119d9576040519150601f19603f3d011682016040523d82523d6000602084013e6119de565b606091505b5050905080611a19576040517f1413ec4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506001600981905550565b606060038054611a349061438a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a609061438a565b8015611aad5780601f10611a8257610100808354040283529160200191611aad565b820191906000526020600020905b815481529060010190602001808311611a9057829003601f168201915b5050505050905090565b6000816107d0816bffffffffffffffffffffffff161115611b0f57806040517f05a79cda000000000000000000000000000000000000000000000000000000008152600401611b0691906140a5565b60405180910390fd5b60026009541415611b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4c90613fe2565b60405180910390fd5b6002600981905550611b67600a6126bf565b9150611b7333836126cd565b611b7e828585610c85565b611b8882866126eb565b33600d600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611be4600a61275f565b813373ffffffffffffffffffffffffffffffffffffffff167f061b141191d79859f7cc6256c1b9e5f380052197831efe9135841c0ff4de7e6385604051611c2b919061408a565b60405180910390a36001600981905550509392505050565b611c55611c4e612775565b838361277d565b5050565b611c6a611c64612775565b836128ea565b611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090613fc2565b60405180910390fd5b611cb58484848461297f565b50505050565b600e5481565b6060611ccc8261232a565b6000600860008481526020019081526020016000208054611cec9061438a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d189061438a565b8015611d655780601f10611d3a57610100808354040283529160200191611d65565b820191906000526020600020905b815481529060010190602001808311611d4857829003601f168201915b505050505090506000611d766129db565b9050600081511415611d8c578192505050611dcf565b600082511115611dc1578082604051602001611da9929190613d1c565b60405160208183030381529060405292505050611dcf565b611dca846129f2565b925050505b919050565b806000600b6000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111611ea057816040517fdb363db8000000000000000000000000000000000000000000000000000000008152600401611e97919061401d565b60405180910390fd5b60026009541415611ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edd90613fe2565b60405180910390fd5b60026009819055506000600b6000858152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015611fbf578381600001516040517f8eb7b75f000000000000000000000000000000000000000000000000000000008152600401611fb6929190614061565b60405180910390fd5b606460026064611fcf9190614276565b34611fda919061421c565b611fe491906141eb565b600c6000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120329190614195565b600c6000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506064600234612088919061421c565b61209291906141eb565b600c60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050612149816020015133866112fb565b833373ffffffffffffffffffffffffffffffffffffffff167ffe2094c9ff56716cb07edf0cff82da158f346cb3bb2d89703228ab4eb0c329b68360000151604051612194919061401d565b60405180910390a3506001600981905550505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600e54905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061231357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612323575061232282612a5a565b5b9050919050565b61233381612ad4565b612372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236990613f42565b60405180910390fd5b50565b600061238082611372565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e890613f62565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16612410612775565b73ffffffffffffffffffffffffffffffffffffffff16148061243f575061243e81612439612775565b6121aa565b5b61247e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247590613f02565b60405180910390fd5b6124888383612b40565b505050565b612495612695565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156124f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ea90613fa2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255a90613f82565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff168152506001600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b612646612640612775565b826128ea565b612685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267c90613fc2565b60405180910390fd5b612690838383612bf9565b505050565b6000612710905090565b6126ba83838360405180602001604052806000815250611c59565b505050565b600081600001549050919050565b6126e7828260405180602001604052806000815250612e60565b5050565b6126f482612ad4565b612733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272a90613ee2565b60405180910390fd5b8060086000848152602001908152602001600020908051906020019061275a929190613464565b505050565b6001816000016000828254019250508190555050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156127ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e390613ea2565b60405180910390fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128dd9190613de5565b60405180910390a3505050565b6000806128f683611372565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612938575061293781856121aa565b5b8061297657508373ffffffffffffffffffffffffffffffffffffffff1661295e84610b5b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b61298a848484612bf9565b61299684848484612ebb565b6129d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129cc90613e22565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606129fd8261232a565b6000612a076129db565b90506000815111612a275760405180602001604052806000815250612a52565b80612a3184613052565b604051602001612a42929190613d1c565b6040516020818303038152906040525b915050919050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612acd5750612acc826131b3565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612bb383611372565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b8273ffffffffffffffffffffffffffffffffffffffff16612c1982611372565b73ffffffffffffffffffffffffffffffffffffffff1614612c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6690613e42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd690613e82565b60405180910390fd5b612cea83838361321d565b612cf5600082612b40565b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d459190614276565b925050819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d9c9190614195565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e5b83838361322d565b505050565b612e6a8383613232565b612e776000848484612ebb565b612eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ead90613e22565b60405180910390fd5b505050565b6000612edc8473ffffffffffffffffffffffffffffffffffffffff1661340c565b15613045578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f05612775565b8786866040518563ffffffff1660e01b8152600401612f279493929190613d70565b602060405180830381600087803b158015612f4157600080fd5b505af1925050508015612f7257506040513d601f19601f82011682018060405250810190612f6f9190613855565b60015b612ff5573d8060008114612fa2576040519150601f19603f3d011682016040523d82523d6000602084013e612fa7565b606091505b50600081511415612fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe490613e22565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061304a565b600190505b949350505050565b6060600082141561309a576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131ae565b600082905060005b600082146130cc5780806130b5906143ed565b915050600a826130c591906141eb565b91506130a2565b60008167ffffffffffffffff8111156130e8576130e7614523565b5b6040519080825280601f01601f19166020018201604052801561311a5781602001600182028036833780820191505090505b5090505b600085146131a7576001826131339190614276565b9150600a856131429190614436565b603061314e9190614195565b60f81b818381518110613164576131636144f4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131a091906141eb565b945061311e565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61322883838361342f565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156132a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161329990613f22565b60405180910390fd5b6132ab81612ad4565b156132eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e290613e62565b60405180910390fd5b6132f76000838361321d565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133479190614195565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46134086000838361322d565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b8280546134709061438a565b90600052602060002090601f01602090048101928261349257600085556134d9565b82601f106134ab57805160ff19168380011785556134d9565b828001600101855582156134d9579182015b828111156134d85782518255916020019190600101906134bd565b5b5090506134e691906134ea565b5090565b5b808211156135035760008160009055506001016134eb565b5090565b600061351a613515846140e5565b6140c0565b90508281526020810184848401111561353657613535614557565b5b613541848285614348565b509392505050565b600061355c61355784614116565b6140c0565b90508281526020810184848401111561357857613577614557565b5b613583848285614348565b509392505050565b60008135905061359a81614937565b92915050565b6000813590506135af8161494e565b92915050565b6000813590506135c481614965565b92915050565b6000815190506135d981614965565b92915050565b600082601f8301126135f4576135f3614552565b5b8135613604848260208601613507565b91505092915050565b600082601f83011261362257613621614552565b5b8135613632848260208601613549565b91505092915050565b60008135905061364a8161497c565b92915050565b60008135905061365f81614993565b92915050565b60006020828403121561367b5761367a614561565b5b60006136898482850161358b565b91505092915050565b600080604083850312156136a9576136a8614561565b5b60006136b78582860161358b565b92505060206136c88582860161358b565b9150509250929050565b6000806000606084860312156136eb576136ea614561565b5b60006136f98682870161358b565b935050602061370a8682870161358b565b925050604061371b8682870161363b565b9150509250925092565b6000806000806080858703121561373f5761373e614561565b5b600061374d8782880161358b565b945050602061375e8782880161358b565b935050604061376f8782880161363b565b925050606085013567ffffffffffffffff8111156137905761378f61455c565b5b61379c878288016135df565b91505092959194509250565b600080604083850312156137bf576137be614561565b5b60006137cd8582860161358b565b92505060206137de858286016135a0565b9150509250929050565b600080604083850312156137ff576137fe614561565b5b600061380d8582860161358b565b925050602061381e8582860161363b565b9150509250929050565b60006020828403121561383e5761383d614561565b5b600061384c848285016135b5565b91505092915050565b60006020828403121561386b5761386a614561565b5b6000613879848285016135ca565b91505092915050565b60008060006060848603121561389b5761389a614561565b5b600084013567ffffffffffffffff8111156138b9576138b861455c565b5b6138c58682870161360d565b93505060206138d68682870161358b565b92505060406138e786828701613650565b9150509250925092565b60006020828403121561390757613906614561565b5b60006139158482850161363b565b91505092915050565b60008060006060848603121561393757613936614561565b5b60006139458682870161363b565b93505060206139568682870161358b565b925050604061396786828701613650565b9150509250925092565b6000806040838503121561398857613987614561565b5b60006139968582860161363b565b92505060206139a78582860161363b565b9150509250929050565b6139ba816142aa565b82525050565b6139c9816142aa565b82525050565b6139d8816142bc565b82525050565b60006139e982614147565b6139f3818561415d565b9350613a03818560208601614357565b613a0c81614566565b840191505092915050565b6000613a2282614152565b613a2c8185614179565b9350613a3c818560208601614357565b613a4581614566565b840191505092915050565b6000613a5b82614152565b613a65818561418a565b9350613a75818560208601614357565b80840191505092915050565b6000613a8e603283614179565b9150613a9982614577565b604082019050919050565b6000613ab1602583614179565b9150613abc826145c6565b604082019050919050565b6000613ad4601c83614179565b9150613adf82614615565b602082019050919050565b6000613af7602483614179565b9150613b028261463e565b604082019050919050565b6000613b1a601983614179565b9150613b258261468d565b602082019050919050565b6000613b3d602983614179565b9150613b48826146b6565b604082019050919050565b6000613b60602e83614179565b9150613b6b82614705565b604082019050919050565b6000613b83603e83614179565b9150613b8e82614754565b604082019050919050565b6000613ba6602083614179565b9150613bb1826147a3565b602082019050919050565b6000613bc9601883614179565b9150613bd4826147cc565b602082019050919050565b6000613bec602183614179565b9150613bf7826147f5565b604082019050919050565b6000613c0f60008361416e565b9150613c1a82614844565b600082019050919050565b6000613c32601b83614179565b9150613c3d82614847565b602082019050919050565b6000613c55602a83614179565b9150613c6082614870565b604082019050919050565b6000613c78602e83614179565b9150613c83826148bf565b604082019050919050565b6000613c9b601f83614179565b9150613ca68261490e565b602082019050919050565b604082016000820151613cc76000850182613ce0565b506020820151613cda60208501826139b1565b50505050565b613ce981614314565b82525050565b613cf881614314565b82525050565b613d0781614336565b82525050565b613d168161431e565b82525050565b6000613d288285613a50565b9150613d348284613a50565b91508190509392505050565b6000613d4b82613c02565b9150819050919050565b6000602082019050613d6a60008301846139c0565b92915050565b6000608082019050613d8560008301876139c0565b613d9260208301866139c0565b613d9f6040830185613cef565b8181036060830152613db181846139de565b905095945050505050565b6000604082019050613dd160008301856139c0565b613dde6020830184613cef565b9392505050565b6000602082019050613dfa60008301846139cf565b92915050565b60006020820190508181036000830152613e1a8184613a17565b905092915050565b60006020820190508181036000830152613e3b81613a81565b9050919050565b60006020820190508181036000830152613e5b81613aa4565b9050919050565b60006020820190508181036000830152613e7b81613ac7565b9050919050565b60006020820190508181036000830152613e9b81613aea565b9050919050565b60006020820190508181036000830152613ebb81613b0d565b9050919050565b60006020820190508181036000830152613edb81613b30565b9050919050565b60006020820190508181036000830152613efb81613b53565b9050919050565b60006020820190508181036000830152613f1b81613b76565b9050919050565b60006020820190508181036000830152613f3b81613b99565b9050919050565b60006020820190508181036000830152613f5b81613bbc565b9050919050565b60006020820190508181036000830152613f7b81613bdf565b9050919050565b60006020820190508181036000830152613f9b81613c25565b9050919050565b60006020820190508181036000830152613fbb81613c48565b9050919050565b60006020820190508181036000830152613fdb81613c6b565b9050919050565b60006020820190508181036000830152613ffb81613c8e565b9050919050565b60006040820190506140176000830184613cb1565b92915050565b60006020820190506140326000830184613cef565b92915050565b600060408201905061404d6000830185613cef565b61405a60208301846139c0565b9392505050565b60006040820190506140766000830185613cef565b6140836020830184613cef565b9392505050565b600060208201905061409f6000830184613cfe565b92915050565b60006020820190506140ba6000830184613d0d565b92915050565b60006140ca6140db565b90506140d682826143bc565b919050565b6000604051905090565b600067ffffffffffffffff821115614100576140ff614523565b5b61410982614566565b9050602081019050919050565b600067ffffffffffffffff82111561413157614130614523565b5b61413a82614566565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006141a082614314565b91506141ab83614314565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141e0576141df614467565b5b828201905092915050565b60006141f682614314565b915061420183614314565b92508261421157614210614496565b5b828204905092915050565b600061422782614314565b915061423283614314565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561426b5761426a614467565b5b828202905092915050565b600061428182614314565b915061428c83614314565b92508282101561429f5761429e614467565b5b828203905092915050565b60006142b5826142f4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b60006143418261431e565b9050919050565b82818337600083830152505050565b60005b8381101561437557808201518184015260208101905061435a565b83811115614384576000848401525b50505050565b600060028204905060018216806143a257607f821691505b602082108114156143b6576143b56144c5565b5b50919050565b6143c582614566565b810181811067ffffffffffffffff821117156143e4576143e3614523565b5b80604052505050565b60006143f882614314565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561442b5761442a614467565b5b600182019050919050565b600061444182614314565b915061444c83614314565b92508261445c5761445b614496565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b614940816142aa565b811461494b57600080fd5b50565b614957816142bc565b811461496257600080fd5b50565b61496e816142c8565b811461497957600080fd5b50565b61498581614314565b811461499057600080fd5b50565b61499c8161431e565b81146149a757600080fd5b5056fea26469706673582212205e56925121bc048ae892bae52df22980bf39ba1156155889fa4b5a5fabd7871864736f6c63430008070033",
  "devdoc": {
    "author": "Gabriel Antony Xaviour",
    "details": "ENeural NFTs are ERC2981 to provide",
    "events": {
      "ItemListed(address,uint256,uint256)": {
        "details": "Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "buyItem(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "cancelListing(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "listItem(uint256,uint256)": {
        "params": {
          "price": "The desired listing price by the seller",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateListing(uint256,uint256)": {
        "params": {
          "newPrice": "The updated listing price proposed by the seller",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "withdrawProceeds()": {
        "details": "Reentrancy guard put into action preventing multiple calls to this function"
      }
    },
    "title": "NeuralNFTMarketplace",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NeuralNFTMarketplace__PriceMustBeAboveZero()": [
        {
          "notice": "Error Declarations"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "PLATFORM_FEE()": {
        "notice": "2% of the sale of a NFT goes to the owner of the contract"
      },
      "buyItem(uint256)": {
        "notice": "Buys an NFT which is on sale in the marketplace"
      },
      "cancelListing(uint256)": {
        "notice": "Cancels a listing by the user in the marketplace"
      },
      "constructor": {
        "notice": "Initializes the marketplace and owner of the contract."
      },
      "listItem(uint256,uint256)": {
        "notice": "Lists an NFT for sale on the marketplace"
      },
      "setListFee(uint256)": {
        "notice": "Getters and Setters"
      },
      "updateListing(uint256,uint256)": {
        "notice": "Updates a listing by the user which is on sale in the marketplace"
      },
      "withdrawProceeds()": {
        "notice": "Withdraws the earnings made by the user in the marketplace"
      }
    },
    "notice": "A marketplace for NFTs with the sixth sense",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1228,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)1225_storage"
      },
      {
        "astId": 1233,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1225_storage)"
      },
      {
        "astId": 84,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 90,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 94,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 98,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 104,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1072,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 29,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2123,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)1732_storage"
      },
      {
        "astId": 2139,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Listing)2128_storage)"
      },
      {
        "astId": 2143,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_earnings",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2147,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_creator",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2150,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_list_fee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)2128_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NeuralNFTMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2128_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1225_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1225_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1732_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1731,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Listing)2128_storage": {
        "encoding": "inplace",
        "label": "struct NeuralNFTMarketplace.Listing",
        "members": [
          {
            "astId": 2125,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2127,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)1225_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1222,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1224,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}